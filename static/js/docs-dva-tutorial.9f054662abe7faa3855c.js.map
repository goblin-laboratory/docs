{"version":3,"sources":["webpack:///./docs/dva/tutorial.md"],"names":["MDXContent","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","layout","React","Component","_this$props","components","_objectWithoutProperties","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_1__","name","id","parentName","href","src","alt","className"],"mappings":"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","file":"static/js/docs-dva-tutorial.56a9d094.js","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"dva-教程\"}}>{`dva 教程`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://github.com/dvajs/dva-docs/tree/master/v1/zh-cn/tutorial\"}}>{`原文地址`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"前言\"}}>{`前言`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`需要了解的是 dva 是对 redux 的一层浅封装，所以虽然我们不要求一定要了解 redux 才能学会使用 dva ，但是如果你对 redux 有所了解，再使用 dva 一定驾轻就熟，并且会了解很多潜在的知识点。 redux 社区较为成熟，文档也比较健全，可以范访问 `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"http://redux.js.org\"}}>{`http://redux.js.org`}</MDXTag>{` （`}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"http://cn.redux.js.org/index.html\"}}>{`中文文档`}</MDXTag>{`）查看更多内容，其中会介绍整个生态系统的相关框架与设计思路，值得一看。`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"结构划分\"}}>{`结构划分`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`很多同学在搭建项目的时候，往往会忽略项目结构的划分，实际上合理的项目划分往往能够提供规范的项目搭建思路。在 dva 架构的项目中，我们推荐的目录基本结构为：`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`.\n├── /mock/            # 数据 mock 的接口文件\n├── /src/             # 项目源码目录\n│ ├── /components/    # 项目组件\n│ ├── /routes/        # 路由组件（页面维度）\n│ ├── /models/        # 数据模型\n│ ├── /services/      # 数据接口\n│ ├── /utils/         # 工具函数\n│ ├── route.js        # 路由配置\n│ ├── index.js        # 入口文件\n│ ├── index.less\n│ └── index.html\n├── package.json      # 项目信息\n└── porxy.config.js   # 数据 mock 配置\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`大家可以发现， dva 将项目中所有可能出现的功能性都映射到了对应的目录中，并且对整个项目的功能从目录上也有了清晰的体现，所以我们建议你的项目也按照这个目录来组织文件，如果你用的是 dva-cli 工具生成的 dva 脚手架模板，那么会帮你按照这样的目录生成好。`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"设计model\"}}>{`设计Model`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`在了解项目基本的结构划分以后，我们将要开始设计 model ，在设计 model 之前，我们来回顾一下我们需要做的项目是什么样的：`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://cloud.githubusercontent.com/assets/1179603/17655205/dfde2f4e-62dd-11e6-9c91-657ee4c17b91.png\",\"alt\":null}}></MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"model-的抽象\"}}>{`Model 的抽象`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`从设计稿中我们可以看出，这部分功能基本是围绕 `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`以用户数据为基础`}</MDXTag>{` 的操作，其中包含：`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`用户信息的展示（查询）`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`用户信息的操作（增加，删除，修改）`}</MDXTag>\n</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`有经验的同学不难发现，无论多复杂的项目也基本是围绕者数据的展示和操作，复杂一点的无非是组合了很多数据，有关联关系，只要分解开来， model 的结构层次依旧会很清晰，便于维护。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`所以抽离 model 的原则就是抽离数据模型，很明显在这里，我们首先会抽离一个 users 的 model 。`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"model-的设计\"}}>{`Model 的设计`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`在抽离了 users 以后，我们来看下如何设计，通常有以下两种方式：`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`按照数据维度`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`按照业务维度`}</MDXTag>\n</MDXTag>\n</MDXTag>\n<MDXTag name=\"h4\" components={components} props={{\"id\":\"数据维度\"}}>{`数据维度`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`按照数据维度的 model 设计原则就是抽离数据本身以及相关操作的方法，比如在本例的 users ：`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`// models/users.js\n\nexport default {\n  namespace: 'users',\n  state: {\n    list: [],\n    total: null,\n  },\n  effects: {\n    *query(){},\n    *create(){},\n    // 因为 delete 是关键字\n    *'delete'(){},\n    *update(){},\n  },\n  reducers: {\n    querySuccess(){},\n    createSuccess(){},\n    deleteSuccess(){},\n    updateSuccess(){},\n  },\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`如果你写过后台代码，你会发现这跟我们常常写的后台接口是很类似的，只关心数据本身，至于在使用 users model 的组件中所遇到的状态管理等信息跟 model 无关，而是作为组件自身的 state 维护。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`这种设计方法使得 model 很纯粹，在设计通用数据信息 model 的时候比较适用，比如当前用户登陆信息等数据 model 。但是在数据跟业务状态交互比较紧密，数据不是那么独立的时候会有些不那么方便，因为数据跟业务状态紧密相连的场景下，将状态放到 model 里面维护会使得我们的代码更加清晰可控，而这种方式就是下面将要介绍的 `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`业务维度`}</MDXTag>{` 方式的设计。`}</MDXTag>\n<MDXTag name=\"h4\" components={components} props={{\"id\":\"业务维度\"}}>{`业务维度`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`按照业务维度的 model 设计，则是将数据以及使用强关联数据的组件中的状态统一抽象成 model 的方法，在本例中， users model 设计如下：`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`// models/users.js\n\nexport default {\n  namespace: 'users',\n\n  state: {\n    list: [],\n    total: null,\n    loading: false, // 控制加载状态\n    current: null,  // 当前分页信息\n    currentItem: {},  // 当前操作的用户对象\n    modalVisible: false,  // 弹出窗的显示状态\n    modalType: 'create',  // 弹出窗的类型（添加用户，编辑用户）\n  },\n  effects: {\n    *query(){},\n    *create(){},\n    // 因为 delete 是关键字\n    *'delete'(){},\n    *update(){},\n  },\n  reducers: {\n    showLoading(){},\n    showModal(){},\n    hideModal(){},\n    querySuccess(){},\n    createSuccess(){},\n    deleteSuccess(){},\n    updateSuccess(){},\n  },\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`需要注意的是，有可能初次接触到 name(){} 的语法有些陌生，这种写法可以看成是：`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`name: function(){}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`的简写，另外， `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`*name(){}`}</MDXTag>{` 前面的 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`*`}</MDXTag>{` 号，表示这个方法是一个 `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`Generator 函数`}</MDXTag>{` ，具体可以参考 `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"http://www.ruanyifeng.com/blog/2015/04/generator.html\"}}>{`Generator 函数的含义和用法`}</MDXTag>{` 。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`回到代码，可以看到，我们将业务状态也一并放到 model 当中去了，这样所有的状态变化都会在 model 中控制，会更容易跟踪和操作。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`根据样例项目的情况，由于数据跟业务状态关联性强，所以我们采用 业务维度 的方式来设计我们的 model ，在设计好了 users model 的基本形态以后，接下来在写代码的过程中我们会不断完善。`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"组件设计方法\"}}>{`组件设计方法`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`在初步确定了 model 的设计方法以后，让我们来看看如何设计 dva 的 React 组件。`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"组件设计\"}}>{`组件设计`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`React 应用是由一个个独立的 Component 组成的，我们在拆分 Component 的过程中要尽量让每个 Component 专注做自己的事。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`一般来说，我们的组件有两种设计：`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`Container Component`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`Presentational Component`}</MDXTag>\n</MDXTag>\n</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"container-component\"}}>{`Container Component`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Container Component 一般指的是具有 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`监听数据行为`}</MDXTag>{` 的组件，一般来说他们的职责是 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`绑定关联的 model 数据`}</MDXTag>{` ，以数据容器的角色包含其它子组件，通常在项目中表现出来的类型为： Layouts、Router Components 以及普通的 Containers 组件。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`通常的书写形式为：`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`import React, { Component, PropTypes } from 'react';\n\n// dva 的 connect 方法可以进组件和数据关联在一起\nimport { connect } from 'dva';\n\n// 组件本身\nconst MyComponent = (props) => {};\nMyComponect.propTypes = {};\n\n// 监听属性，建立组件和数据的映射关系\nfunction mapStateToProps(state){\n  return { ...state.data };\n}\n\n// 关联 model\nexport default connect(mapStateToProps)(MyComponect);\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"presentational-component\"}}>{`Presentational Component`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Presentational Component 的名称已经说明了它的职责，展示形组件，一般也称作： Dumb Component ，它不会关联订阅 model 上的数据，而所需数据的传递则是通过 props 传递到组件内部。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`通常的书写的形式：`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`import React, { Component, PropTypes } from 'react';\n\n// 组件本身\n// 所需要的数据通过 Container Component 通过 props 传递下来\nconst MyComponent = (props)=>{}\nMyComponent.propTypes = {};\n\n// 并不会监听数据\nexport default MyComponent;\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"对比\"}}>{`对比`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`对组件分类，主要有两个好处：`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`让项目的数据处理更加集中`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`让组件高内聚低耦合，更加聚焦`}</MDXTag>\n</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`试想如果每个组件都去订阅数据 model ，那么一方面组件本身跟 model 耦合太多，另一方面代码过于零散，到处都在操作数据，会带来后期维护的烦恼。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`除了写法上订阅数据的区别以外，在设计思路上两个组件也有很大的不同。 Presentational Component 是独立的纯粹的，这方面很好的例子，大家可以参考 `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://ant.design/docs/react/introduce-cn\"}}>{`ant.design UI组件的React实现`}</MDXTag>{` ，每个组件跟业务数据并没有耦合关系，只是完成自己独立的任务，需要的数据通过 props 传递进来，需要操作的行为通过接口暴露出去。而 Conatainer Component 更像是状态管理器，它表现为一个容器，订阅子组件需要的数据，组织子组件的交互逻辑和展示。`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"组件设计实践\"}}>{`组件设计实践`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`建议对照完整代码一起看 `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://github.com/dvajs/dva-example-user-dashboard\"}}>{`dva-example-user-dashboard`}</MDXTag>{` 。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`按照之前快速上手的内容，我们可以使用 dva-cli 工具快速生成规范的目录，在命令行输入：`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-shell\"}}>{`\\$ mkdir myApp && cd myApp\n\\$ dva init\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`现在，规范的样例模板我们已经有了，接下来我们一步一步添加自己的东西，看看如何完成我们的组件设计。`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"设置路由\"}}>{`设置路由`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`在准备好了 dva 的基本框架以后，需要为我们的项目配置一下路由，这里首先设置 User Router Container 的访问路径，并且在 /routes/ 下创建我们的组件文件 User.jsx 。`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`// src/router.js\nimport React, { PropTypes } from 'react';\nimport { Router, Route } from 'dva/router';\nimport Users from './routes/User';\n\nexport default function ({ history }){\n  return (\n    <Router history={history}>\n      <Route path=\"/users\" component={User} />\n    </Router>\n  );\n};\n`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\"}}>{`// src/routes/Users.jsx\nimport React, { PropTypes } from 'react';\n\nfunction Users(){\n  return (\n    <div>User Router Componect</div>\n  );\n}\n\nUsers.propTypes = {\n\n};\n\nexport default Users;\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`其他路由可以自行添加，关于路由更多信息，可以查看 react-router 获取更多内容。`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"users-container-component-的设计\"}}>{`Users Container Component 的设计`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`基础工作都准备好了，接下来就开始设计 Users Container Component 。在本项目中 Users Container 的表现为 Route Components （这也是 dva 推荐的结构划分），可以理解页面维度的容器，所以我们在 /routes/ 下加入 Users.jsx 。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`我们采用 自顶向下 的设计方法，修改 ./src/routes/Users.jsx 如下：`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\"}}>{`// ./src/routes/Users.jsx\nimport React, { Component, PropTypes } from 'react';\n\n// Users 的 Presentational Component\n// 暂时都没实现\nimport UserList from '../components/Users/UserList';\nimport UserSearch from '../components/Users/UserSearch';\nimport UserModal from '../components/Users/UserModal';\n\n// 引入对应的样式\n// 可以暂时新建一个空的\nimport styles from './Users.less';\n\nfunction Users(){\n  const userSearchProps = {};\n  const userListProps = {};\n  const userModalProps = {};\n\n  return (\n    <div className={styles.normal}>\n      {/* 用户筛选搜索框 */}\n      <UserSearch {...userSearchProps} />\n      {/* 用户信息展示列表 */}\n      <UserList {...userListProps} />\n      {/* 添加用户 & 修改用户弹出的浮层 */}\n      <UserModal {...userModalProps} />\n    </div>\n  );\n}\n\nexport default Users;\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`其中， UserSearch 、 UserList 、 UserModal 我们还未实现，不过我们可以暂时让他们输出一段话，表示占位，基本的数据结构表现的很清楚， User Router Container 由这三个 Presentational Components 组成。（其中 {...x} 的用法可以参看 es6）`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\"}}>{`// ./src/components/Users/UserSearch.jsx\nimport React, { PropTypes } from 'react';\nexport default () => <div>user search</div>;\n`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\"}}>{`// ./src/components/Users/UserList.jsx\nimport React, { PropTypes } from 'react';\nexport default () => <div>user list</div>;\n`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\"}}>{`// ./src/components/Users/UserModal.jsx\nimport React, { PropTypes } from 'react';\nexport default () => <div>user modal</div>;\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`现在如果你的本地环境是成功的，访问 `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"http://127.0.0.1:8989/#/users\"}}>{`http://127.0.0.1:8989/#/users`}</MDXTag>{` 浏览器中看到：`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://camo.githubusercontent.com/a0ae436be0feb946f9ab9416fe2540083ef21460/68747470733a2f2f7a6f732e616c697061796f626a656374732e636f6d2f726d73706f7274616c2f517547736b687471556a4f6e785a4e2e706e67\",\"alt\":null}}></MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"userlist-组件\"}}>{`Userlist 组件`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`暂时放下 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`<UserSearch />`}</MDXTag>{` 和 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`<UserModal />`}</MDXTag>{` ，先来看看 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`<UserList />`}</MDXTag>{` 的实现，这是一个用户的展示列表，我们期望只需要把数据传入进去，修改 ./src/components/Users/UserList.jsx ：`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\"}}>{`// ./src/components/Users/UserList.jsx\nimport React, { Component, PropTypes } from 'react';\n\n// 采用 antd 的 UI 组件\nimport { Table, message, Popconfirm } from 'antd';\n\n// 采用 stateless\nconst UserList = ({\n  total,\n  current,\n  loading,\n  dataSource,\n}) => {\n  const columns = [{\n    title: '姓名',\n    dataIndex: 'name',\n    key: 'name',\n    render: (text) => <a href=\"#\">{text}</a>,\n  }, {\n    title: '年龄',\n    dataIndex: 'age',\n    key: 'age',\n  }, {\n    title: '住址',\n    dataIndex: 'address',\n    key: 'address',\n  }, {\n    title: '操作',\n    key: 'operation',\n    render: (text, record) => (\n      <p>\n        <a onClick={()=>{}}>编辑</a>\n        &nbsp;\n        <Popconfirm title=\"确定要删除吗？\" onConfirm={()=>{}}>\n          <a>删除</a>\n        </Popconfirm>\n      <p>\n    ),\n  }];\n\n  const pagination = {\n    total,\n    current,\n    pageSize: 10,\n    onChange: ()=>{},\n  };\n\n  return (\n    <div>\n      <Table\n        columns={columns}\n        dataSource={dataSource}\n        loading={loading}\n        rowKey={record => record.id}\n        pagination={pagination}\n      />\n    </div>\n  );\n}\n\nexport default UserList;\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`为了方便起见，我们这里使用一个优秀的 UI 组件库 antd 。 antd 提供了 table 组件，可以让我们方便的展示相关数据，具体使用方式可以参看其文档。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`需要注意的是，由于我们采用了 antd ，所以我们需要在我们的代码中添加样式，可以在 ./src/index.jsx 中添加一行：`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\"}}>{`import 'antd/dist/antd.css';\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`这样我们使用的 antd 组件就可以展示出样子了：`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://camo.githubusercontent.com/40cd32be14db69d47f2cf0eed2da501239b1e749/68747470733a2f2f7a6f732e616c697061796f626a656374732e636f6d2f726d73706f7274616c2f5946594474766741436c684d5152752e706e67\",\"alt\":null}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`其中我们发现，在我们设计 UserList 的时候，需要将分页信息 total 、 current 以及加载状态信息 loading 也传入进来，所以现在使用 UserList 就需要这样：`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\"}}>{`<UserList\n  current={current}\n  total={total}\n  dataSource={list}\n  loading={loading}\n/>\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`接下来，我们回到 User Router Container 模拟一些静态数据，传入 UserList ，让其展示数据。`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"userlist-添加静态数据\"}}>{`UserList 添加静态数据`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\"}}>{`// ./src/routes/Users.jsx\nimport React, { Component, PropTypes } from 'react';\n\n// Users 的 Presentational Component\n// 暂时都没实现\nimport UserList from '../components/Users/UserList';\nimport UserSearch from '../components/Users/UserSearch';\nimport UserModal from '../components/Users/UserModal';\n\n// 引入对应的样式\n// 可以暂时新建一个空的\nimport styles from './Users.less';\n\nfunction Users(){\n  const userSearchProps = {};\n  const userListProps = {\n    total: 3,\n    current: 1,\n    loading: false,\n    dataSource: [{\n      name: '张三',\n      age: 23,\n      address: '成都',\n    }, {\n      name: '李四',\n      age: 24,\n      address: '杭州',\n    }, {\n      name: '王五',\n      age: 25,\n      address: '上海',\n    }],\n  };\n  const userModalProps = {};\n\n  return (\n    <div className={styles.normal}>\n      {/* 用户筛选搜索框 */}\n      <UserSearch {...userSearchProps} />\n      {/* 用户信息展示列表 */}\n      <UserList {...userListProps} />\n      {/* 添加用户 & 修改用户弹出的浮层 */}\n      <UserModal {...userModalProps} />\n    </div>\n  );\n}\n\nUsers.propTypes = {\n  users: PropTypes.object,\n};\n\nexport default Users;\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`传入了静态数据以后，组件的表现如下：`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://camo.githubusercontent.com/d44a2b2f8a8ada62e8e7b90457be6be7d054dfc9/68747470733a2f2f7a6f732e616c697061796f626a656374732e636f6d2f726d73706f7274616c2f484944684c534e4567794e6e5651442e706e67\",\"alt\":null}}></MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"组件设计小结\"}}>{`组件设计小结`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`虽然我们上面实现的代码很简单，但是已经包含了组件设计的主要思路，可以看到 UserList 组件是一个很纯粹的 Presentational Component ，所需要的数据以及状态是通过 User Router Component 传递的，我们现在还是用的静态数据，接下来我们来看看如何在 model 创建 reducer 来将我们的数据抽取出来。`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"添加-reducers\"}}>{`添加 Reducers`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"理解-reducers\"}}>{`理解 Reducers`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`首先需要理解什么是 reducer ， dva 中 reducer 的概念，主要是来源于下层封装的 redux ，在 dva 中 reducers 主要负责修改 model 的数据 （ state ）。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`也许你在迷惑，为什么会叫做 reducer 这个名字，你或许知道 reduce 这个方法，在很多程序语言中，数组类型都具备 reduce 方法，而这个方法的功能就是聚合，比如下面这个在 JavaScript 中的例子：`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`[{x: 1}, {y: 2}, {z: 3}].reduce(function(pre, next){\n  return Object.assign(pre, next);\n});\n// return {x: 1, y: 2, z: 3}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`可以看到，在上面的这个例子中，我将三个对象合并成一个对象，这就是 reducer 的实现， model 的数据就是通过我们分离出来的 reducer 创建出来的，这样可以让每个 reducer 专注于相关数据的修改，但是最终会构建出完整的数据。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`如果你想了解更多，可以参看 `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"http://cn.redux.js.org/docs/basics/Reducers.html\"}}>{`Redux Reducers`}</MDXTag>{`。`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"给-users-model-添加-reducers\"}}>{`给 Users Model 添加 Reducers`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`回到我们之前的 /models/users.js ，我们在之前已经定义好了它的 state ，接下来我们看看如何根据新的数据来修改本身的 state，这就是 reducers 要做的事情。`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`export default {\n  namespace: 'users',\n\n  state: {\n    list: [],\n    total: null,\n    loading: false, // 控制加载状态\n    current: null,  // 当前分页信息\n    currentItem: {}, // 当前操作的对象\n    modalVisible: false, // 弹出窗的显示状态\n    modalType: 'create', // 弹出窗的类型（添加用户，编辑用户）\n  },\n  effects: {\n    *query(){},\n    *create(){},\n    *'delete'(){},\n    *update(){},\n  },\n  reducers: {\n    showLoading(){},  // 控制加载状态的 reducer\n    showModal(){},    // 控制 Modal 显示状态的 reducer\n    hideModal(){},\n    // 使用静态数据返回\n    querySuccess(state){\n      const mock = {\n        total: 3,\n        current: 1,\n        loading: false,\n        list: [{\n          id: 1,\n          name: '张三',\n          age: 23,\n          address: '成都',\n        }, {\n          id: 2,\n          name: '李四',\n          age: 24,\n          address: '杭州',\n        }, {\n          id: 3,\n          name: '王五',\n          age: 25,\n          address: '上海',\n        },],\n      };\n      return {...state, ...mock, loading: false};\n    },\n    createSuccess(){},\n    deletSuccess(){},\n    updateSuccess(){},\n  }\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`我们把之前 UserList 组件中模拟的静态数据，移动到了 reducers 中，通过调用 'users/query/success' 这个 reducer ，我们就可以将 Users Modal 的数据变成静态数据，那么我们如何调用这个 reducer ，能够让这个数据传入 UserList 组件呢，接下来需要做的是：关联Modal。`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"关联-model\"}}>{`关联 Model`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`// ./src/routes/Users.jsx\nimport React, { Component, PropTypes } from 'react';\n\n// 引入 connect 工具函数\nimport { connect } from 'dva';\n\n// Users 的 Presentational Component\n// 暂时都没实现\nimport UserList from '../components/Users/UserList';\nimport UserSearch from '../components/Users/UserSearch';\nimport UserModal from '../components/Users/UserModal';\n\n// 引入对应的样式\n// 可以暂时新建一个空的\nimport style from './Users.less';\n\nfunction Users({ location, dispatch, users }) {\n  const {\n    loading, list, total, current,\n    currentItem, modalVisible, modalType\n  } = users;\n\n  const userSearchProps = {};\n  const userListProps = {\n    dataSource: list,\n    total,\n    loading,\n    current,\n  };\n  const userModalProps = {};\n\n  return (\n    <div className={styles.normal}>\n      {/* 用户筛选搜索框 */}\n      <UserSearch {...userSearchProps} />\n      {/* 用户信息展示列表 */}\n      <UserList {...userListProps} />\n      {/* 添加用户 & 修改用户弹出的浮层 */}\n      <UserModal {...userModalProps} />\n    </div>\n  );\n}\n\nUsers.propTypes = {\n  users: PropTypes.object,\n};\n\n// 指定订阅数据，这里关联了 users\nfunction mapStateToProps({ users }){\n  return {users};\n}\n\n// 建立数据关联关系\nexport default connect(mapStateToProps)(Users);\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`在之前的组件设计中讲到了 Presentational Component 的设计概念，在订阅了数据以后，就可以通过 props 访问到 model 的数据了，而 UserList 展示组件的数据，也是 Container Component 通过 props 传递的过来的。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`组件和 model 建立了关联关系以后，如何在组件中获取 reducers 的数据呢，或者如何调用 reducers 呢，就是需要发起一个 action。`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"发起-actions\"}}>{`发起 Actions`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`actions 的概念跟 reducers 一样，也是来自于 dva 封装的 redux，表达的概念是发起一个修改数据的行为，主要的作用是传递信息：`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`dispatch({\n  type: '', // action 的名称，与 reducers (effects) 对应\n  ... // 调用时传递的参数，在 reducers (effects) 可以获取\n});\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`知道了如何发起一个 action ，那么剩下的就是发起的时机了，通常我们建议在组件内部的声明周期发起，比如：`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`...\ncomponentDidMount(){\n  this.props.dispatch({\n    type: 'model/action',\n  });\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`不过在本例中采用另一种发起 action 的场景，在本例中获取用户数据信息的时机就是访问 /users/ 这个页面，所以我们可以监听路由信息，只要路径是 /users/ 那么我们就会发起 action ，获取用户数据：`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`// ./src/models/users.js\nimport { hashHistory } from 'dva/router';\n\nexport default {\n  namespace: 'users',\n\n  state: {\n    list: [],\n    total: null,\n    loading: false,\n    current: null,\n    currentItem: {},\n    modalVisible: false,\n    modalType: 'create',\n  },\n  subscriptions: {\n    setup({ dispatch, history }){\n      history.listen(location => {\n        if (location.pathname === '/users') {\n          dispatch({\n            type: 'querySuccess',\n            payload: {},\n          });\n        }\n      });\n    },\n  },\n\n  effects: {\n    *query(){},\n    *create(){},\n    *'delete'(){},\n    *update(){},\n  },\n\n  reducers: {\n    showLoading(){},\n    showModal(){},\n    hideModal(){},\n    querySuccess(state){\n      const mock = {\n        total: 3,\n        current: 1,\n        loading: false,\n        list: [{\n          name: '张三',\n          age: 23,\n          address: '成都',\n        }, {\n          name: '李四',\n          age: 24,\n          address: '杭州',\n        }, {\n          name: '王五',\n          age: 25,\n          address: '上海',\n        },],\n      };\n\n      return {...state, ...mock, loading: false};\n    },\n    createSuccess:(){},\n    deleteSuccess:(){},\n    updateSuccess:(){},\n  },\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`以上代码在浏览器访问 /users 路径的时候就会发起一个 action ，数据准备完毕，别忘了回到 index.js 中，添加我们的 models :`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`// ./src/index.js\nimport './index.html';\nimport './index.less';\nimport dva, { connect } from 'dva';\n\nimport 'antd/dist/antd.css';\n\n// 1. Initialize\nconst app = dva();\n\n// 2. Model\napp.model(require('./models/users.js'));\n\n// 3. Router\napp.router(require('./router'));\n\n// 4. Start\napp.start(document.getElementById('root'));\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`如果一切正常，访问 ：`}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"\"}}>{`http://127.0.0.1:8989/#/users`}</MDXTag>{` ，可以看到：`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://camo.githubusercontent.com/e40bab1b89abc366004b680699e95798498a3d5e/68747470733a2f2f7a6f732e616c697061796f626a656374732e636f6d2f726d73706f7274616c2f56456168714275737a67694169667a2e706e67\",\"alt\":null}}></MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"小结\"}}>{`小结`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`在这个例子中，我们在合适的时机（进入 /users/ ）发起（ dispatch ）了一个 action ，修改了 model 的数据，并且通过 Container Components 关联了 model ，通过 props 传递到 Presentation Components ，组件成功显示。如果你想了解更多关于 reducers & actions 的信息，可以参看 `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"http://redux.js.org/\"}}>{`redux`}</MDXTag>{` 。`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"添加-effects\"}}>{`添加 Effects`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`在之前的教程中，我们已经完成了静态数据的操作，但是在真实场景中，数据都是从服务器来的，我们需要发起异步请求，在请求回来以后设置数据，更新 state ，那么在 dva 中，这一切是怎么操作的呢，首先我们先来简单了解一下 Effects 。`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"理解-effects\"}}>{`理解 Effects`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Effects 来源于 dva 封装的底层库 redux-sagas 的概念，主要指的是处理 Side Effects ，指的是副作用（源于函数式编程），在这里可以简单理解成异步操作，所以我们是不是可以理解成 Reducers 处理同步，Effects 处理异步？这么理解也没有问题，但是要认清 Reducers 的本质是修改 model 的 state，而 Effects 主要是控制数据流程，所以最终往往我们在 Effects 中会调用 Reducers。`}</MDXTag>\n<MDXTag name=\"blockquote\" components={components}>\n<MDXTag name=\"p\" components={components} parentName=\"blockquote\">{`在函数式编程中，我们强调纯函数的作用：纯函数是这样一种函数，即相同的输入，永远会得到相同的输出，而且没有任何可观察的副作用，简单的理解就是每个函数职责纯粹，所有行为就是返回新的值，没有其他行为，真实情况最常见的副作用就是异步操作，所以 dva 提供了 effects 来专门放置副作用，不过可以发现的是，由于 effects 使用了 Generator Creator ，所以将异步操作同步化，也是纯函数。`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"给-users-model-添加-effects\"}}>{`给 Users Model 添加 Effects`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`// ./src/models/users.js\nimport { hashHistory } from 'dva/router';\n//import { create, remove, update, query } from '../services/users';\n\nimport request from '../utils/request';\nimport qs from 'qs';\n\nasync function query(params){\n  return request(\\`/api/users?\\${qs.stringify(params)}\\`);\n};\n\nexport default {\n  namespace: 'users',\n\n  state: {\n    list: [],\n    total: null,\n    loading: false,\n    current: null,\n    currentItem: {},\n    modalVisible: false,\n    modalType: 'create',\n  },\n\n  subscriptions: {\n    setup({ dispatch, history }) {\n      history.listen(location => {\n        if (location.pathname === '/users') {\n          dispatch({\n            type: 'query',\n            payload: {}\n          });\n        }\n      });\n    },\n  },\n\n  effects: {\n    *query({ payload }, { select, call, put }){\n      yield put({ type: 'showLoading' });\n      const { data } = yield call(query);\n      if (data){\n        yield put({\n          type: 'querySuccess',\n          payload: {\n            list: data.data,\n            total: data.page.total,\n            current: data.page.current,\n          },\n        });\n      }\n    },\n    *create(){},\n    *'delete'(){},\n    *update(){},\n  },\n\n  reducers: {\n    showLoading(state, action){\n      return { ...state, loading: true };\n    }, // 控制加载状态的 reducer\n    showModal(){}, // 控制 Modal 显示状态的 reducer\n    hideModal(){},\n    // 使用服务器数据返回\n    querySuccess(state, action){\n      return {...state, ...action.payload, loading: false};\n    },\n    createSuccess(){},\n    deleteSuccess(){},\n    updateSuccess(){},\n  },\n};\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`首先我们需要增加 `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`query 第二个参数 `}</MDXTag>{`query({payload}, {select, call, put}) ，其中 call 和 put 是 dva 提供的方便操作 effects 的函数，简单理解 call 是调用执行一个函数而 put 则是相当于 dispatch 执行一个 action ，而 select 则可以用来访问其他 model，更多可以参考 redux-saga-in-chinese 。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`而在 query 函数里面，可以看到我们处理异步的方式跟同步一样，所以能够很好的控制异步流程，这也是我们使用 Effects 的原因，关于相关的更多内容可以参看 `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"http://www.ruanyifeng.com/blog/2015/04/generator.html\"}}>{`Generator 函数的含义与用法`}</MDXTag>{`。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`这里我们把请求的处理直接写在代码里面，接下来我们需要把它拆分到 /servers/ 里面统一处理：`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`import request from '../utils/request';\nimport qs from 'qs';\nasync function query(params) {\n  return request(\\`/api/users?\\${qs.stringify(params)}\\`);\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`关于 async 的用法，可以参考 `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"http://www.ruanyifeng.com/blog/2015/05/async.html\"}}>{`async 函数的含义和用法`}</MDXTag>{`，需要注意的是，无论是 Generator 函数，yield 亦或是 async 目的只有一个：让异步编程跟同步一样，从而能够很好的控制执行流程。`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"定义-services\"}}>{`定义 Services`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`之前我们已经：\n1. 设计好了 modal state -> 抽象数据\n2. 完善了组件 -> 完善展示\n3. 添加了 Reducers -> 数据同步处理\n4. 添加了 Effects -> 数据异步处理`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`接下来就是将请求相关（与后台系统的交互）抽取出来，单独放到 /services/ 中，进行统一维护管理，所以我们只需要将之前定义在 Effects 的以下代码，移动到 /servers/users.js 中即可：`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`略...`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"mock-数据\"}}>{`mock 数据`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`略...`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"添加样式\"}}>{`添加样式`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`略...`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"设计布局\"}}>{`设计布局`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`在项目中，我们通常都会有布局组件的概念，常见的场景是整个项目通用的头尾，侧边栏，以及整体布局结构等，这些布局内容被抽象成组件，包含一些布局样式，用于组合其他组件搭建成页面。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`说白了，其实它本质上还是一种组件，将布局样式抽象成组件，能够保持子组件和父组件的独立性，不用在其中关键关联到布局信息。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`如我们的样例项目中的 MainLayout.jsx :`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`// ./components/MainLayout/MainLayout.jsx\nimport React, { PropTypes } from 'react';\nimport styles from './MainLayout.less';\nimport Header from './Header';\n\nfunction MainLayout({children, location}){\n  return (\n    <div className={styles.normal}>\n      <Header loction={location} />\n      <div className={styles.content}>\n        <div className={styles.main}>\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nMainLayout.propTypes = {\n  children: PropTypes.element.isRequired,\n  location: PropTypes.object,\n};\n\nexport default MainLayout;\n`}</MDXTag></MDXTag>\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}