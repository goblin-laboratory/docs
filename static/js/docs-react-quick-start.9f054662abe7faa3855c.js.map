{"version":3,"sources":["webpack:///./docs/react/quick-start.md"],"names":["MDXContent","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","layout","React","Component","_this$props","components","_objectWithoutProperties","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_1__","name","id","parentName","href","src","alt","className"],"mappings":"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","file":"static/js/docs-react-quick-start.16f986e8.js","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"快速开始\"}}>{`快速开始`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"react-理念\"}}>{`React 理念`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://react.docschina.org/docs/thinking-in-react.html\"}}>{`原文地址`}</MDXTag></MDXTag>\n<MDXTag name=\"blockquote\" components={components}>\n<MDXTag name=\"p\" components={components} parentName=\"blockquote\">{`在我们的理念中，React 最初的目的时使用 JavaScript 创建大型的，快速响应的网络应用。它在我们的 Facebook 和 Instagram 中已经实践的非常好了。`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`React 的众多优点之一是它让你在编写代码的时候同时也在思考你的应用。在这篇文档中，我们会带你使用 React 一起创建一个可搜索的产品数据表格，并向你展示我们的思考过程。`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"从模拟页面开始\"}}>{`从模拟页面开始`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`想象我们已经有一个 JSON 接口和一个设计师给我们的原型图。原型图象下面这样：`}</MDXTag>\n{/* ![](../images/thinking-in-react-mock-1071fbcc9eed01fddc115b41e193ec11-4dd91.png) */}\n<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://raw.githubusercontent.com/goblin-laboratory/docs/docz/images/thinking-in-react-mock-1071fbcc9eed01fddc115b41e193ec11-4dd91.png\",\"alt\":null}}></MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"第一步：把-ui-划分出组件层级\"}}>{`第一步：把 UI 划分出组件层级`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`第一件你要做的事情是用方框划分出每一个组件（和子组件）并给他们命名。如果你和设计师一起工作，他们可能已经完成了这些，所以去和他们聊聊吧！他们的 Photoshop 图层名称也许就是你的 React 组件名称！`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`但你如何知道哪一部分应该成为一个组件？想想在编写代码时你在什么情况下需要新建一个函数或者对象，思考方式是一样的。例如单一功能原则，在理想状况下，一个组件应该只做一件事情。如果这个组件功能不断丰富，他应该被分成更小的组件。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`既让你经常向用户展示 JSON 数据模型，你会发现，如果你的模型构建正确，你的 UI（以及你的组件结构）会被很好的映射。这是因为 UI 和数据模型往往遵循这相同的信息架构，这意味着将 UI 划分成组件的工作往往是很容易的。只要把它划分成能准确表示你数据模型的一部风的组件就可以。`}</MDXTag>\n{/* ![](../images/thinking-in-react-components-eb8bda25806a89ebdc838813bdfa3601-82965.png) */}\n<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://raw.githubusercontent.com/goblin-laboratory/docs/docz/images/thinking-in-react-components-eb8bda25806a89ebdc838813bdfa3601-82965.png\",\"alt\":null}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`在这里你会看到，我们的简单应用有 5 个组件。`}</MDXTag>\n{/* 我们把每个组件展示的数据用斜体表示。 */}\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`FilterableProductTable（橙色）：包含了整个例子`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`SearchBar（蓝色）：接受所有的用户输入`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`ProductTable（绿色）：根据用户输入过滤并展示数据集合`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`ProductCategoryRow（绿松石色）：展示每个分类的标题`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`ProductRow（红色）：用行来展示每个产品`}</MDXTag>\n</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`如果你查看 ProductTable，你会发现表态（包含 Name 和 Price 标签）并没有作为一个组件。这是一个偏好问题，选择哪种方式目前还存在争议。在这个例子中，我们把它作为 ProductTable 的一部风，因为它是渲染数据集合的一部风，而渲染数据集合是 ProductTable 的职责。然而，如果头部变得更加复杂（也就是，如果我们添加了排序功能），他就有足够的理由成为一个单独的 ProductTableHeader 组件。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`现在我们已经确定了原型图中的组件，让我们把他们整理成层级结构。这很容易。原型图中的子组件在层级结构中应该作为子节点。`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`FilterableProductTable`}<MDXTag name=\"ul\" components={components} parentName=\"li\">\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`SearchBar`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`ProductTable`}<MDXTag name=\"ul\" components={components} parentName=\"li\">\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`ProductCategoryRow`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`ProductRow`}</MDXTag>\n</MDXTag></MDXTag>\n</MDXTag></MDXTag>\n</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"第二步：用-react-创建一个静态版本\"}}>{`第二步：用 React 创建一个静态版本`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://codepen.io/lacker/pen/vXpAgj\"}}>{`https://codepen.io/lacker/pen/vXpAgj`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-html\"}}>{`<div id=\"container\">\n  <!-- This element's contents will be replaced with your component. -->\n</div>\n`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-css\"}}>{`body {\n  padding: 5px\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\"}}>{`class ProductCategoryRow extends React.Component {\n  render() {\n    return <tr><th colSpan=\"2\">{this.props.category}</th></tr>;\n  }\n}\n\nclass ProductRow extends React.Component {\n  render() {\n    var name = this.props.product.stocked ?\n      this.props.product.name :\n      <span style={{color: 'red'}}>\n        {this.props.product.name}\n      </span>;\n    return (\n      <tr>\n        <td>{name}</td>\n        <td>{this.props.product.price}</td>\n      </tr>\n    );\n  }\n}\n\nclass ProductTable extends React.Component {\n  render() {\n    var rows = [];\n    var lastCategory = null;\n    this.props.products.forEach(function(product) {\n      if (product.category !== lastCategory) {\n        rows.push(<ProductCategoryRow category={product.category} key={product.category} />);\n      }\n      rows.push(<ProductRow product={product} key={product.name} />);\n      lastCategory = product.category;\n    });\n    return (\n      <table>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Price</th>\n          </tr>\n        </thead>\n        <tbody>{rows}</tbody>\n      </table>\n    );\n  }\n}\n\nclass SearchBar extends React.Component {\n  render() {\n    return (\n      <form>\n        <input type=\"text\" placeholder=\"Search...\" />\n        <p>\n          <input type=\"checkbox\" />\n          {' '}\n          Only show products in stock\n        </p>\n      </form>\n    );\n  }\n}\n\nclass FilterableProductTable extends React.Component {\n  render() {\n    return (\n      <div>\n        <SearchBar />\n        <ProductTable products={this.props.products} />\n      </div>\n    );\n  }\n}\n\n\nvar PRODUCTS = [\n  {category: 'Sporting Goods', price: '\\$49.99', stocked: true, name: 'Football'},\n  {category: 'Sporting Goods', price: '\\$9.99', stocked: true, name: 'Baseball'},\n  {category: 'Sporting Goods', price: '\\$29.99', stocked: false, name: 'Basketball'},\n  {category: 'Electronics', price: '\\$99.99', stocked: true, name: 'iPod Touch'},\n  {category: 'Electronics', price: '\\$399.99', stocked: false, name: 'iPhone 5'},\n  {category: 'Electronics', price: '\\$199.99', stocked: true, name: 'Nexus 7'}\n];\n\nReactDOM.render(\n  <FilterableProductTable products={PRODUCTS} />,\n  document.getElementById('container')\n);\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`现在有了组件层级，是时候去实现你的应用了。最简单的方式是先创建一个静态版本：传入数据模型，渲染 UI 但没有任何交互。最好把这些过程解耦，因为创建一个静态版本更多需要的码代码，不太需要逻辑思考，而添加交互则更多需要的是逻辑思考，不是码代码。我们会看看为什么是这样的。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`要构建一个用于呈现数据模型的静态版本的应用程序，你需要创建能够复用其他组件的组件，并通过 props 来传递数据。 props 是一种从父级向子级传递数据的方法。如果你熟悉 state 的概念，在创建静态版本的时候不要使用 state。State 只在交互的时候使用，即随时间变化的数据。由于这是静态版本的应用，你不需要使用它。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`你可以自顶向下或者自底向上构建应用。也就是，你可以从层级最高的组件开始构建（即 FilterableProductTable 开始）或层级最低的组件开始构建（ProductRow）。在较为简单的例子中，通常自顶向下更容易，而在较大的项目中，自底向上会更容易并且在你构建的时候有利于编写测试。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`在这步的最后，你会拥有一个用于呈现数据模型的可重用组件库。这些组件只会有 render 方法，因为这只是你的应用的静态版本。层级最高的组件（FilterableProductTable）会把数据模型作为 prop 传入。如果你改变你的基础数据模型并且再次调用 ReactDOM.render()，UI 会更新。很容易看到你的 UI是如何更新的，哪些进行了更新。因为没有什么更复杂的事情发生。React　的单项数据流（也叫作单项绑定）保证了一切是模块化并且是快速的。`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"第三步：定义-ui-状态的最小（但完整）表示\"}}>{`第三步：定义 UI 状态的最小（但完整）表示`}</MDXTag>\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}